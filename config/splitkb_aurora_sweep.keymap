/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
    #define BASE 0
    #define NAV 1
    #define NUM 2
    #define SYM 3
    #define FUN 4
    #define MAC 5
		#define SET 6
// -----------------

&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ {

    macros {
            macro01: macro01 {
                label = "macro01";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_tap &kp SLCK>
                    , <&macro_tap &kp SLCK>
                    , <&macro_tap &kp 1>
                    ;
            };

            macro02: macro02 {
                label = "macro02";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_tap &kp SLCK>
                    , <&macro_tap &kp SLCK>
                    , <&macro_tap &kp 2>
                    ;
            };

            macro03: macro03 {
                label = "macro03";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_tap &kp SLCK>
                    , <&macro_tap &kp SLCK>
                    , <&macro_tap &kp 3>
                    ;
            };

            macro04: macro04 {
                label = "macro04";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_tap &kp SLCK>
                    , <&macro_tap &kp SLCK>
                    , <&macro_tap &kp 4>
                    ;
            };
        };

    behaviors {
        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sptab: space_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_TAB";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp TAB>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bsdel: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BKSP>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        entps: enter_printscreen {
            compatible = "zmk,behavior-mod-morph";
            label = "ENTER_PRINTSCREEN";
            #binding-cells = <0>;
            bindings = <&kp ENTER>, <&kp PSCRN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

         combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

            combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

                    combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

                           combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };


       combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };



    };

        keymap {
                compatible = "zmk,keymap";

    default_layer {
		bindings = <
		&kp ESC &kp W &kp F &kp P &kp B  &kp J &kp L &kp U &kp Y &sl MAC
		&mt LCTL A &mt LALT R &lt NAV S &lt NUM T &mt LGUI G  &lt LGUI M &lt FUN N &lt SYM E &mt LALT I &mt LCTL O
    &kp Z &kp CMMA &kp C &kp D &kp V  &kp K &kp H &kp X &kp DOT &kp Q
          				&kp BKSP &kp LSFT  				&kp SPACE &kp RET
		>;
		};

    nav_layer {
		bindings = <
		&trans &trans &trans &kp PG_UP &trans		&trans &kp HOME &kp UP &kp END &trans
		&trans &trans &trans &kp PG_DN &trans 	&trans &kp LEFT &kp DOWN &kp RIGHT &trans
		&trans &trans &trans &trans &trans     	&trans &trans &trans &trans &trans
					  &trans &trans    &trans &trans
		>;
		};

		num_layer {
		bindings = <
    &trans &kp CARET &kp ASTRK &kp PLUS &trans		&kp PERCENT &kp N7 &kp N8 &kp N9 &trans
		&trans &trans &kp FSLH &trans &kp EQUAL	      &kp DOT &kp N4 &kp N5 &kp N6 &kp N0
		&trans &trans &trans &kp MINUS &trans       	&kp NUBS &kp N1 &kp N2 &kp N3 &kp NUBS
					  &trans &trans    &trans &trans
		>;
		};

		sym_layer {
		bindings = <
    &trans &kp TILDE &kp LBRC &kp RBRC &trans	  	&trans &trans &trans &trans &trans
		&trans &kp HASH &kp LPAR &kp RPAR &trans 	    &trans &trans &trans &trans &trans
		&trans &kp DLLR &kp LBRC &kp RBRC &trans 	    &trans &trans &trans &trans &trans
					  &trans &trans    &trans &trans
		>;
		};

    fun_layer {
    bindings = <
    &kp F1 &kp F2 &kp F3 &kp F4 &kp KP_NLCK       &trans &trans &trans &trans &trans
		&kp F5 &kp F6 &kp F7 &kp F8 &kp CAPS  	      &trans &trans &trans &trans &trans
		&kp F9 &kp F10 &kp F11 &kp F12 &kp SLCK       &trans &trans &trans &trans &trans
				    &trans &trans   &trans &trans
    >;
    };

    mac_layer {
    bindings = <
    &macro01 &macro02 &macro03 &macro04 &trans    &sl SET &trans &trans &trans &trans
	  &trans &trans &trans &trans &trans            &trans &trans &trans &trans &trans
		&trans &trans &trans &trans &trans            &trans &trans &trans &trans &trans
					    &trans &trans   &trans &trans
    >;
    };

    settings_layer {
    bindings = <
    &trans &trans &trans &trans &trans            &trans &trans &trans &trans &trans
	  &trans &trans &trans &trans &trans            &trans &trans &trans &trans &trans
		&trans &trans &trans &trans &trans            &trans &trans &trans &trans &trans
					    &trans &trans   &trans &trans
    >;
    };

	};
};
